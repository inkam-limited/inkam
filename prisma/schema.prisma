generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Division {
  id        String     @id @default(uuid())
  name      String
  nameBn    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  districts District[]
}

model District {
  id          String   @id @default(uuid())
  name        String
  nameBn      String
  coordinates String
  divisionId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  division    Division @relation(fields: [divisionId], references: [id])
}

model User {
  id        String   @id @unique
  name      String?
  number    String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(NEWBIE)
}

model Agent {
  agentId      String        @id @default(uuid())
  name         String
  ownerNumber  String?
  number       String        @unique
  managerName  String?
  division     String?
  district     String?
  address      Json?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  AgentType    AGENTTYPE     @default(PHARMACY)
  payment      Float         @default(0.00)
  agentPayment Float         @default(0.00)
  password     String        @default("0000")
  transaction  Transaction[]
}

model Transaction {
  transactionId    String            @id @default(uuid())
  agentId          String
  agentNumber      String
  agentName        String
  customerNumber   String
  customerName     String
  customerLocation String
  labTestId        String
  inkam            Float             @default(0.00)
  amount           Float             @default(100.00)
  isPaid           Boolean           @default(false)
  status           TransactionStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  agent            Agent             @relation(fields: [agentId], references: [agentId], onDelete: Cascade)
  labTest          LabTest           @relation(fields: [labTestId], references: [testId], onDelete: Cascade)
}

model LabTest {
  testId         String        @id @default(uuid())
  name           String        @unique
  commissionRate String
  commission     String
  price          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Transaction    Transaction[]
}

model Invoice {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Json
  disbursed Boolean  @default(false)
  name      Int      @default(autoincrement())
}

enum Role {
  ADMIN
  MODERATOR
  PARTNER
  NEWBIE
}

enum AGENTTYPE {
  PHARMACY
  RESTURANT
  INDIVIDUAL
  MERCHANT
}

enum TransactionStatus {
  PENDING
  SCHEDULED
  FAILED
  PROVIDED
}

enum PaymentStatus {
  PENDING
  PAID
}
