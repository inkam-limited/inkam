// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  PARTNER
}

enum AGENTTYPE {
  PHARMACY
  RESTURANT
  INDIVIDUAL
  MERCHANT
}

model Division {
  id        String     @id @default(uuid())
  name      String
  nameBn    String
  districts District[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model District {
  id          String   @id @default(uuid())
  name        String
  nameBn      String
  coordinates String
  divisionId  String
  division    Division @relation(fields: [divisionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        String   @id @unique
  name      String?
  number    String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(MODERATOR)
}

model Agent {
  agentId     String        @id @default(uuid())
  name        String
  number      String        @unique
  division    String?
  district    String?
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
  AgentType   AGENTTYPE     @default(INDIVIDUAL)
}

enum TransactionStatus {
  PENDING
  SCHEDULED
  FAILED
}

model Transaction {
  transactionId    String            @id @default(uuid())
  agent            Agent             @relation(fields: [agentId], references: [agentId], onDelete: Cascade)
  agentId          String
  agentName        String
  customerNumber   String
  customerName     String
  customerLocation String
  labTestId        String
  status           TransactionStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  labTest          LabTest           @relation(fields: [labTestId], references: [testId])
}

model LabTest {
  testId         String        @id @default(uuid())
  name           String        @unique
  commissionRate String
  commission     String
  price          String
  Transaction    Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
